@startuml classDiagrams

class Robot {
    - isActive: bool
    - isBroken: bool
    - robotType: string
    - robotSize: string
    - batteryLife: int
    - probFailure: int
    - destination: Room
    - robotMutex: mutex
    - robotID: int
    - nextRobotID: int

    + getActive(): bool 
    + setActive(bool): void
    + getBrokenStatus(): bool
    + setBrokenStatus(bool): void 
    + getRobotType(): RobotType  
    + getRobotSize(): RobotSize  
    + getBattery(): int 
    + updateBattery(int amountTime): void 
    + getRobotID(): string 
    + getRobotBattery(): string  
    + getProbFailureString(): string  
    + getTaskDuration(): int 
    + setTaskDuration(int): void 
    + getID(): int 
    + charge(): void
    + failGrade(): int 
    + getDestination(): Room
    + printRobot(): void  
    + getRobotTypeString(): string  
    + getRobotSizeString(): string
}


class MongoDBConnector {
    + MongoDBConnector()
    + void insertRobot(const Robot& robot)
    + void insertRoom(const Room& room)
    + void insertTask(const Task& task)
    + void connect(std::string uri)
    - mongocxx::instance instance{}
    - mongocxx::client conn{}
}


class Room {
    - mopTime: int
    - vacuumTime: int
    - scrubTime: int
    - mopping: int
    - vacuum: int
    - scrubber: int
    - roomSize: int
    - area: int 
    - id: int
    - cleanLevel: cleanStatus

    + getID(): int
    + setRoomSize(RoomSize newSize): void
    + getSize(): RoomSize
    + getMopTime(): int
    + getVacuumTime(): int
    + getScrubTime(): int
    + getNumMopping(): int
    + getNumVacuum(): int
    + getNumScrubber(): int
    + getClean(): cleanStatus
    + setClean(cleanStatus level): void 
    + getIDAsString(): string  
    + printRoom(): void 
    + printCurrentRobots(): void
    
}

class Simulation {
    - availableMap: map<int, bool> 
    - allRobots: vector<Robot> 
    - taskMap: map<int, vector<bool>> 
    - roomList: vector<Room>  
    - taskList: vector<Task> 
    - waitingQueue: vector<Room> 
    - cleaningRooms: vector<Room> 
    - completeRooms: vector<Room> 
    - helperBool: vector<bool> 
    - chargingThreads: vector<thread> 

    + runSimulation(): void
    + getInput(): void
    + createTask(): Task
    + getAvailableRobots(): vector<Robot>
    + getUnavailableRobots(): vector<Robot>
    + getRoomList(): vector<Room>

    + runSimulation(): void 
    + getAvailableMap(): map<int, bool> 
    + getRoomList(): vector<Room> 
    + printAvailableRobots(): void 
    + printUnavailableRobots(): void 
    + printRoomList(): void 
    + printTaskList(): void 
    + getTasks(): vector<Task>& 
    + createTask(): void 
    + createTaskHelper(Room taskLocation): Task 
    + start(): void 
    + timeThread(int): void     
    + idToRobot(int): Robot 
    + idToRoom(int): Room 
    + setRoomsDirty(): void   
    + setRoomDNC(int): void 
    + updateRobotBattery(): void 
    + chargeRobots(): void 
    + chargeIndividual(Robot&): void 
    + setActive(): void 
}

class Task {
  - numRobots: int
  - int mopTime
  - int vacuumTime
  - int scrubTime
  - isCompleted: boolean
  - robots: vector<Robot>
  - robotsIDs: vector<string>
  - taskLocation: Room
  - roomID: int
  - id: int

  + setNumRobots(numRobots: int)
  + setMopTime(): int
  + setVacuumTime(): int
  + setScrubTime(): int
  + setIsCompleted(isCompleted: boolean)
  + getNumRobots(): int
  + getMopTime(): int
  + getVacuumTime(): int
  + getScrubTime(): int
  + getRoomID(): int
  + getIsCompleted(): boolean
  + getRobots(): vector<Robot> 
  + printTask(): void
  + getID(): int
}

MongoDBConnector "1" -- "0..n" Robot 
MongoDBConnector "1" -- "0..n" Room 
MongoDBConnector "1" -- "0..n" Task 

Robot "0..." o--> "0...1" Room
Robot "0..." o--> "0...1" Task
Simulation "0..." o--> "0...n" Room
Simulation "0..." o--> "0...n" Task


@enduml
