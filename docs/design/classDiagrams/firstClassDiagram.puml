@startuml RobotClassDiagram

class Robot {
    - isActive: bool
    - isBroken: bool
    - robotType: string
    - robotSize: string
    - batteryLife: int
    - probFailure: int
    - destination: Room
    - currentTask: Task
    - completedTasks: vector<Task>
    # getActive(): bool
    # getBrokenStatus(): bool
    # setBrokenStatus(brokenStatus: bool): void
    # getRobotType(): string
    # getRobotSize(): string
    # getBattery(): int
    # charge(): void
    # getDestination(): Room
    # setDestination(destination: Room): void
    # getCompletedTasks(): vector<Task>
    # getTask(): Task
    # setTask(task: Task): void
}

class Room {
    - int mopTime
    - int vacuumTime
    - int scrubTime
    - int mopping
    - int vacuum
    - int scrubber
    - string size
    - int area
    - vector<Room> waitingQueue
    - vector<Room> cleaningRooms
    - vector<Room> completeRooms


    - generateRoom(): Room
    - generateMopArea(): int
    - generateVacuumArea(): int
    - generateScrubArea(): int
    + setSize(): void
    + getSize(): int
    + getMopTime(): int
    + getVacuumTime(): int
    + getScrubTime(): int
    + getNumMopping(): int
    + getNumVacuum(): int
    + getNumScrubber(): int
    + getWaitingRooms(): vector<Room>
    + getCompletedRooms(): vector<Room>
    + getCurrentCleaning(): vector<Room>
    

}

class Task {

}

class Simulation {
    - availableRobots: vector<Robot>
    - unavailableRobots: vector<Robot>
    - roomList: vector<Room>
    # runSimulation(): void
    # getInput(): void
    # createTask(): Task
    # getAvailableRobots(): vector<Robot>
    # getUnavailableRobots(): vector<Robot>
    # getRoomList(): vector<Room>
}

Robot "0..." o--> "0...1" Room
Robot "0..." o--> "0...1" Task

@enduml
